{"version":3,"sources":["components/Question/index.js","components/Answers/index.js","components/Results/index.js","containers/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","react_default","a","createElement","question","Answers","answers","map","ans","i","key","onClick","onSubmit","type","value","placeholder","Results","correct","Game","state","answered","submittedAnswer","chosenAnswer","componentWillMount","_this","setState","results","correct_answer","concat","Object","toConsumableArray","incorrect_answers","submitHandler","e","preventDefault","randomAnswers","shuffleArray","changeHandler","target","clickedAnswerHandler","console","log","array","length","j","Math","floor","random","_ref","Fragment","this","response_code","components_Question","components_Results","components_Answers","onChange","Component","App","isLoaded","categoryChosen","loadedQuestion","fetchQuestions","_callee","category","regenerator_default","wrap","_context","prev","next","abrupt","fetch","then","res","json","data","stop","className","containers_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c04afc4a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Question = (props) => (\r\n    <div>\r\n        <h2>{props.question}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Question;","import React from 'react';\r\n\r\nconst Answers = (props) => (\r\n    <div>\r\n        {props.answers.map((ans, i) => \r\n            (<div key={i}>\r\n                <input onClick={props.onSubmit} type={'submit'} value={ans} placeholder={ans}/>\r\n            </div> )\r\n        )}\r\n    </div>\r\n)\r\n\r\nexport default Answers;","import React from 'react';\r\n\r\nconst Results = (props) => (\r\n    <div>\r\n        <h1>The correct answer was {props.correct}!</h1>\r\n    </div>\r\n);\r\n\r\nexport default Results;","import React, { Component } from 'react';\r\nimport Question from '../../components/Question';\r\nimport Answers from '../../components/Answers';\r\nimport Results from '../../components/Results';\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        question: {},\r\n        answered: false,\r\n        submittedAnswer: '',\r\n        answers: [],\r\n        chosenAnswer: ''\r\n    }\r\n    componentWillMount = () => {\r\n        this.setState({question: this.props.question, answers: [this.props.question.results[0].correct_answer, ...this.props.question.results[0].incorrect_answers]});\r\n    }\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const randomAnswers = [this.state.submittedAnswer, ...this.state.answers];\r\n        this.shuffleArray(randomAnswers);\r\n        this.setState({answered: true, answers: randomAnswers});\r\n    }\r\n    changeHandler = (e) => {\r\n        this.setState({submittedAnswer: e.target.value})\r\n    }\r\n    clickedAnswerHandler = (e) => {\r\n        console.log(e.target.value);\r\n        this.setState({chosenAnswer: e.target.value});\r\n    }\r\n    shuffleArray = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.question.response_code === 0 ?\r\n                    <>\r\n                    <Question question={this.state.question.results[0].question}/>\r\n                    {!this.state.answered ? \r\n                        <form onSubmit={this.submitHandler}>\r\n                            <input type={\"text\"} onChange={this.changeHandler}/>\r\n                            <input type={\"submit\"} placeholder={\"Submit\"} />\r\n                        </form>\r\n                    : !this.state.chosenAnswer ? \r\n                        <Answers \r\n                        answers={this.state.answers}\r\n                        onSubmit={this.clickedAnswerHandler}\r\n                        /> : <Results correct={this.state.question.results[0].correct_answer} />\r\n                        }\r\n                    </>\r\n                : null }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport Game from './containers/Game';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    isLoaded: false,\n    categoryChosen: false,\n    loadedQuestion: {}\n  }\n  changeHandler = (e) => {\n    this.fetchQuestions(e.target.value);\n  }\n  fetchQuestions = async (category) => {\n    return fetch(`https://opentdb.com/api.php?amount=1&category=${category}&type=multiple`)\n            .then(res => res.json())\n              .then(data => this.setState({loadedQuestion: data, categoryChosen: true}))\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.categoryChosen ? \n        <>\n        <h1>Choose a Category</h1>\n        <select onChange={this.changeHandler} value={this.state.value}>\n          <option value={\"any\"}>Any Category</option>\n          <option value={\"9\"}>General Knowledge</option>\n          <option value={\"10\"}>Entertainment: Books</option>\n          <option value={\"11\"}>Entertainment: Film</option>\n          <option value={\"12\"}>Entertainment: Music</option>\n          <option value={\"13\"}>Entertainment: Musicals &amp; Theatres</option>\n          <option value={\"14\"}>Entertainment: Television</option>\n          <option value={\"15\"}>Entertainment: Video Games</option>\n          <option value={\"16\"}>Entertainment: Board Games</option>\n          <option value={\"17\"}>Science &amp; Nature</option>\n          <option value={\"18\"}>Science: Computers</option>\n          <option value={\"19\"}>Science: Mathematics</option>\n          <option value={\"20\"}>Mythology</option>\n          <option value={\"21\"}>Sports</option>\n          <option value={\"22\"}>Geography</option>\n          <option value={\"23\"}>History</option>\n          <option value={\"24\"}>Politics</option>\n          <option value={\"25\"}>Art</option>\n          <option value={\"26\"}>Celebrities</option>\n          <option value={\"27\"}>Animals</option>\n          <option value={\"28\"}>Vehicles</option>\n          <option value={\"29\"}>Entertainment: Comics</option>\n          <option value={\"30\"}>Science: Gadgets</option>\n          <option value={\"31\"}>Entertainment: Japanese Anime &amp; Manga</option>\n          <option value={\"32\"}>Entertainment: Cartoon &amp; Animations</option>\t\t\n        </select></> : <Game question={this.state.loadedQuestion}/>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
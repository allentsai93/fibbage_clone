{"version":3,"sources":["components/Question/index.js","components/Answers/index.js","components/Results/index.js","components/Game/index.js","firebase/context.js","firebase/firebase.js","firebase/index.js","components/StartGame/index.js","components/WaitingRoom/index.js","containers/Home/index.js","serviceWorker.js","index.js"],"names":["Question","props","react_default","a","createElement","dangerouslySetInnerHTML","__html","question","withStyles","theme","card","margin","padding","Grid_default","container","direction","justify","alignItems","answers","map","ans","i","Card_default","className","classes","key","onClick","onSubmit","CardContent_default","Typography_default","Results","correct","Game","_useState","useState","_useState2","Object","slicedToArray","setQuestion","_useState3","_useState4","answered","setAnswered","_useState5","_useState6","submittedAnswer","setSubmittedAnswer","_useState7","_useState8","setAnswers","_useState9","_useState10","chosenAnswer","setChosenAnswer","_useState11","_useState12","autopickedAnswer","setAutopickedAnswer","submitHandler","randomAnswers","concat","toConsumableArray","array","length","j","Math","floor","random","_ref","shuffleArray","useEffect","results","correct_answer","incorrect_answers","Fragment","response_code","components_Question","components_Results","components_Answers","e","type","onChange","target","value","placeholder","FirebaseContext","React","createContext","withFirebase","Component","Consumer","firebase","assign","config","apiKey","authDomain","databaseURL","projectId","storageBucket","Firebase","_this","this","classCallCheck","database","db","initializeApp","categories","setCategories","categoryChosen","setCategoryChosen","loadedQuestion","setLoadedQuestion","setData","gameId","user","userData","categoriesJson","ref","once","then","snapshot","val","players","components_Game","cat","category","fetch","res","json","data","title","startGame","setStartGame","keys","started","components_StartGame","player","index","update","state","existingRoom","errorMsg","startGameHandler","setState","inputHandler","name","defineProperty","joinRoom","hasChild","Promise","reject","set","points","id","uuidv1","catch","shortid","generate","gameOwner","components_WaitingRoom","onInput","Boolean","window","location","hostname","match","ReactDOM","render","context","Provider","containers_Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b5da168.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Question = (props) => (\r\n    <div>\r\n        <h2 dangerouslySetInnerHTML={{__html: props.question}}></h2>\r\n    </div>\r\n);\r\n\r\nexport default Question;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        margin: '10px',\r\n        padding: '10px'\r\n    }\r\n})\r\n\r\nconst Answers = (props) => (\r\n    <Grid\r\n    container\r\n    direction=\"row\"\r\n    justify=\"center\"\r\n    alignItems=\"center\"\r\n  >\r\n        {props.answers.map((ans, i) => \r\n            (<Card className={props.classes.card} key={i} onClick={() => props.onSubmit(ans)}>\r\n                <CardContent>\r\n                    <Typography>\r\n                        {ans}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card> )\r\n        )}\r\n    </Grid>\r\n)\r\n\r\nexport default withStyles(styles)(Answers);","import React from 'react';\r\n\r\nconst Results = (props) => (\r\n    <div>\r\n        <h1>The correct answer was {props.correct}!</h1>\r\n    </div>\r\n);\r\n\r\nexport default Results;","import React, { useState, useEffect } from 'react';\r\nimport Question from '../../components/Question';\r\nimport Answers from '../../components/Answers';\r\nimport Results from '../../components/Results';\r\n\r\nfunction Game(props) {\r\n    const [question, setQuestion] = useState({});\r\n    const [answered, setAnswered] = useState(false);\r\n    const [submittedAnswer, setSubmittedAnswer] = useState(\"\");\r\n    const [answers, setAnswers] = useState([]);\r\n    const [chosenAnswer, setChosenAnswer] = useState(\"\");\r\n    const [autopickedAnswer, setAutopickedAnswer] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n            setQuestion(props.question);\r\n            setAnswers([props.question.results[0].correct_answer, ...props.question.results[0].incorrect_answers])\r\n    }, []);\r\n\r\n    function submitHandler() {\r\n        const randomAnswers = [submittedAnswer || autopickedAnswer, ...answers];\r\n        shuffleArray(randomAnswers);\r\n        setAnswered(true);\r\n        setAnswers(randomAnswers);\r\n    }\r\n    function shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {question.response_code === 0 ?\r\n                <>\r\n                <Question question={question.results[0].question}/>\r\n                {!answered ? \r\n                    <form>\r\n                        <input type=\"text\" onChange={(e) => { setSubmittedAnswer(e.target.value) }} placeholder={autopickedAnswer !== '' ? autopickedAnswer : ''}/>\r\n                        <span onClick={() => { submitHandler() }}>Submit</span>\r\n                        <span onClick={() => { setAutopickedAnswer(answers[2]) }}>Lie For Me</span>\r\n                    </form>\r\n                : !chosenAnswer ? \r\n                    <Answers \r\n                    answers={answers}\r\n                    onSubmit={(e) => setChosenAnswer(e)}\r\n                    /> : <Results correct={question.results[0].correct_answer} />\r\n                    }\r\n                </>\r\n            : null }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\n\r\nconst FirebaseContext = React.createContext(null);\r\n\r\nexport const withFirebase = Component => props => (\r\n  <FirebaseContext.Consumer>\r\n    {firebase => <Component {...props} firebase={firebase} />}\r\n  </FirebaseContext.Consumer>\r\n);\r\n\r\nexport default FirebaseContext;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAsdY2YHQDAVJ9ZJgsqNVB2kaB3A5jVmNY\",\r\n  authDomain: \"fibbage-b1e4d.firebaseapp.com\",\r\n  databaseURL: \"https://fibbage-b1e4d.firebaseio.com\",\r\n  projectId: \"fibbage-b1e4d\",\r\n  storageBucket: \"fibbage-b1e4d.appspot.com\",\r\n};\r\n\r\nclass Firebase {\r\n    constructor() {\r\n        firebase.initializeApp(config);\r\n        this.db = firebase.database();\r\n    }\r\n\r\n    database = () => {\r\n      return this.db;\r\n    }\r\n}\r\n  \r\nexport default Firebase;","import FirebaseContext, { withFirebase } from './context';\r\nimport Firebase from './firebase';\r\n\r\nexport default Firebase;\r\n\r\nexport { FirebaseContext, withFirebase };","import React, { useState, useEffect } from 'react';\r\nimport Game from '../../components/Game';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport '../../App.css';\r\nimport categoriesJson from '../../categories.json';\r\nimport { withFirebase } from '../../firebase';\r\n\r\nconst styles = theme => ({\r\n  card: {\r\n    padding: '10px',\r\n    margin: '10px'\r\n  }\r\n});\r\n\r\nfunction StartGame(props) {\r\n  const [categories, setCategories] = useState([]);\r\n  const [categoryChosen, setCategoryChosen] = useState(false);\r\n  const [loadedQuestion, setLoadedQuestion] = useState({});\r\n  const [players, setData] = useState([]);\r\n\r\n  const gameId = props.gameId;\r\n  const user   = props.user;\r\n  let userData = [];\r\n\r\n  useEffect(() => {\r\n    setCategories(categoriesJson);\r\n    fetchPlayers();\r\n  }, []);\r\n\r\n  function fetchPlayers(){\r\n    props.firebase.database().ref('games/' + gameId + '/players').once('value')\r\n      .then((snapshot) => {\r\n          userData = (snapshot.val());\r\n      })\r\n      .then(()=> {\r\n          let players = userData;\r\n          setData(players);\r\n      })\r\n  }\r\n\r\n  function fetchQuestions(category)  {\r\n    return fetch(`https://opentdb.com/api.php?amount=1&category=${category}&type=multiple`)\r\n            .then(res => res.json())\r\n              .then(data => {\r\n                setLoadedQuestion(data);\r\n                setCategoryChosen(true);\r\n              })\r\n  }\r\n\r\n  const { classes }  = props;\r\n\r\n  return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n      {!categoryChosen ?\r\n      <>\r\n      <h1>Choose a Category</h1>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n      { categories.map((cat, i) => (\r\n        <Card className={classes.card} key={i} value={cat.value} onClick={() => {  fetchQuestions(cat.value) }}>\r\n            <CardContent>\r\n              <Typography>{cat.title}</Typography>\r\n            </CardContent>\r\n      </Card>)) }\r\n      </Grid>\r\n      </> : <Game question={loadedQuestion} user={user} gameId={gameId}/>}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withFirebase(withStyles(styles)(StartGame));\r\n","import React, { useState, useEffect } from 'react';\r\nimport StartGame from '../StartGame';\r\nimport { withFirebase } from '../../firebase';\r\n\r\nfunction WaitingRoom(props) {\r\n    const [startGame, setStartGame] = useState(false);\r\n    const [players, setData] = useState([]);\r\n\r\n    const user    = props.user;\r\n    const gameId  = props.gameId;\r\n    let userData  = {};\r\n\r\n    useEffect(() => {\r\n        props.firebase.database().ref('games/' + gameId + '/players').once('value')\r\n        .then((snapshot) => {\r\n            userData = (snapshot.val());\r\n        })\r\n        .then(()=> {\r\n            let players = Object.keys(userData);\r\n            setData(players)\r\n        })\r\n\r\n        props.firebase.database().ref('games/' + gameId).once('value')\r\n        .then((snapshot) => {\r\n            return snapshot.val();\r\n        })\r\n        .then((data)=> {\r\n            if(data.started) {\r\n                setStartGame(true);\r\n            }\r\n        })\r\n    })\r\n\r\n    const startGameHandler = () => {\r\n        props.firebase.database().ref('games/' + gameId).update({\r\n            started: true\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n        { !startGame ?\r\n            <>\r\n                <h1>Players</h1>\r\n                <p>Room: {gameId}</p>\r\n                {players.map((player, index) => (\r\n                    <span key={index}>{player}</span>\r\n                ))}\r\n                <button onClick={startGameHandler}>Start Game</button>\r\n            </>\r\n        : <StartGame gameId={gameId} user={user}/>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withFirebase(WaitingRoom);","import React, { Component } from 'react';\r\nimport WaitingRoom from '../../components/WaitingRoom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withFirebase } from '../../firebase';\r\nimport shortid from 'shortid';\r\nimport uuidv1 from 'uuid/v1';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        gameId: '',\r\n        user: '',\r\n        existingRoom: false,\r\n        started: false,\r\n        errorMsg: ''\r\n    }\r\n\r\n    startGameHandler = () => {\r\n        this.setState({started: true})\r\n    }\r\n\r\n    inputHandler = (e) =>{\r\n        const errorMsg = e.target.name === 'gameId' ? \"Must enter a game id to join a game\" : 'Must enter a username to join game';\r\n\r\n        if(e.target.value.length > 0){\r\n            this.setState({ [e.target.name]: e.target.value });\r\n        } else {\r\n            this.setState({ errorMsg: errorMsg})\r\n        } \r\n    }\r\n\r\n    joinRoom = () => {\r\n        const gameId    = this.state.gameId;\r\n        const user      = this.state.user;\r\n        const gameData  = this.props.firebase.database().ref('games/');\r\n\r\n        gameData.once(\"value\")\r\n            .then((snapshot) => {\r\n                if(!snapshot.hasChild(gameId)){\r\n                    return Promise.reject();\r\n                } else {\r\n                    const userData  = this.props.firebase.database().ref('games/' + gameId + '/players/');\r\n                    let nameTaken   = false;\r\n                    userData.once(\"value\")\r\n                        .then((snapshot) => {\r\n                            if(snapshot.hasChild(user)){\r\n                               return Promise.reject();\r\n                            } else {\r\n                                this.props.firebase.database().ref('games/' + gameId + '/players/' + user).set({\r\n                                    points : 0,\r\n                                    id     : uuidv1()\r\n                                })\r\n                            }\r\n                        })\r\n                        .then(() => this.setState({started: true, existingRoom: true}))\r\n                        .catch(() =>  this.setState({ errorMsg: \"Please enter another username.\" }))\r\n                }\r\n            }).catch(() =>  this.setState({ errorMsg: \"Game does not exist.\" }))\r\n    }\r\n\r\n    startGameHandler = () => {\r\n        if(this.state.user.length > 0){\r\n            const gameId    = shortid.generate();\r\n            const gameOwner = this.state.user\r\n            this.props.firebase.database().ref('games/' + gameId).set({\r\n                gameOwner : gameOwner,\r\n                started: false\r\n            });\r\n            this.props.firebase.database().ref('games/' + gameId + '/players/' + gameOwner).set({\r\n                points    : 0,\r\n                id        : uuidv1()\r\n            });\r\n            this.setState({\r\n                gameId    : gameId,\r\n                started   : true\r\n            })\r\n        } else {\r\n            this.setState({ errorMsg: \"Must enter a username to create game.\"})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n                {this.state.started ? <WaitingRoom gameId={this.state.gameId} user={this.state.user} /> : \r\n                    <>\r\n                    <input type=\"text\" placeholder=\"Enter a username\" name=\"user\" onInput={this.inputHandler}/>\r\n                    <button onClick={this.startGameHandler}>Create a Room</button>\r\n                    <input type=\"text\" placeholder=\"Enter a game id\" name=\"gameId\" onInput={this.inputHandler}/>\r\n                    <button onClick={this.joinRoom}>Join Room</button>\r\n                    <p>{this.state.errorMsg}</p>\r\n                    </>\r\n                }\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withFirebase(Home);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Home from './containers/Home';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Firebase, { FirebaseContext } from './firebase';\r\n\r\nReactDOM.render(\r\n    <FirebaseContext.Provider value={new Firebase()}>\r\n        <FirebaseContext.Consumer>\r\n            {firebase => <Home firebase={firebase} />}\r\n        </FirebaseContext.Consumer>\r\n    </FirebaseContext.Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Question/index.js","components/Answers/index.js","components/Results/index.js","components/Game/index.js","components/StartGame/index.js","components/WaitingRoom/index.js","firebase.js","containers/Home/index.js","serviceWorker.js","index.js"],"names":["Question","props","react_default","a","createElement","question","withStyles","theme","card","margin","padding","Grid_default","container","direction","justify","alignItems","answers","map","ans","i","Card_default","className","classes","key","onClick","onSubmit","CardContent_default","Typography_default","Results","correct","Game","_useState","useState","_useState2","Object","slicedToArray","setQuestion","_useState3","_useState4","answered","setAnswered","_useState5","_useState6","submittedAnswer","setSubmittedAnswer","_useState7","_useState8","setAnswers","_useState9","_useState10","chosenAnswer","setChosenAnswer","_useState11","_useState12","autopickedAnswer","setAutopickedAnswer","submitHandler","randomAnswers","concat","toConsumableArray","array","length","j","Math","floor","random","_ref","shuffleArray","useEffect","results","correct_answer","incorrect_answers","Fragment","response_code","components_Question","components_Results","components_Answers","e","type","onChange","target","value","placeholder","categories","setCategories","categoryChosen","setCategoryChosen","loadedQuestion","setLoadedQuestion","categoriesJson","components_Game","cat","category","fetch","then","res","json","data","title","WaitingRoom","startGame","setStartGame","components_StartGame","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","Home","state","gameId","user","existingRoom","started","errorMsg","startGameHandler","_this","setState","inputHandler","name","gameIdInputHandler","joinRoom","database","ref","set","points","id","uuidv1","uuidv4","gameOwner","joinGameHandler","this","components_WaitingRoom","onInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6946681.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Question = (props) => (\r\n    <div>\r\n        <h2>{props.question}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Question;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        margin: '10px',\r\n        padding: '10px'\r\n    }\r\n})\r\n\r\nconst Answers = (props) => (\r\n    <Grid\r\n    container\r\n    direction=\"row\"\r\n    justify=\"center\"\r\n    alignItems=\"center\"\r\n  >\r\n        {props.answers.map((ans, i) => \r\n            (<Card className={props.classes.card} key={i} onClick={() => props.onSubmit(ans)}>\r\n                <CardContent>\r\n                    <Typography>\r\n                        {ans}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card> )\r\n        )}\r\n    </Grid>\r\n)\r\n\r\nexport default withStyles(styles)(Answers);","import React from 'react';\r\n\r\nconst Results = (props) => (\r\n    <div>\r\n        <h1>The correct answer was {props.correct}!</h1>\r\n    </div>\r\n);\r\n\r\nexport default Results;","import React, { useState, useEffect } from 'react';\r\nimport Question from '../../components/Question';\r\nimport Answers from '../../components/Answers';\r\nimport Results from '../../components/Results';\r\n\r\nfunction Game(props) {\r\n    const [question, setQuestion] = useState({});\r\n    const [answered, setAnswered] = useState(false);\r\n    const [submittedAnswer, setSubmittedAnswer] = useState(\"\");\r\n    const [answers, setAnswers] = useState([]);\r\n    const [chosenAnswer, setChosenAnswer] = useState(\"\");\r\n    const [autopickedAnswer, setAutopickedAnswer] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n            setQuestion(props.question);\r\n            setAnswers([props.question.results[0].correct_answer, ...props.question.results[0].incorrect_answers])\r\n    }, []);\r\n\r\n    function submitHandler() {\r\n        const randomAnswers = [submittedAnswer || autopickedAnswer, ...answers];\r\n        shuffleArray(randomAnswers);\r\n        setAnswered(true);\r\n        setAnswers(randomAnswers);\r\n    }\r\n    function shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {question.response_code === 0 ?\r\n                <>\r\n                <Question question={question.results[0].question}/>\r\n                {!answered ? \r\n                    <form>\r\n                        <input type=\"text\" onChange={(e) => { setSubmittedAnswer(e.target.value) }} placeholder={autopickedAnswer !== '' ? autopickedAnswer : ''}/>\r\n                        <span onClick={() => { submitHandler() }}>Submit</span>\r\n                        <span onClick={() => { setAutopickedAnswer(answers[2]) }}>Lie For Me</span>\r\n                    </form>\r\n                : !chosenAnswer ? \r\n                    <Answers \r\n                    answers={answers}\r\n                    onSubmit={(e) => setChosenAnswer(e)}\r\n                    /> : <Results correct={question.results[0].correct_answer} />\r\n                    }\r\n                </>\r\n            : null }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Game;","import React, { useState, useEffect } from 'react';\r\nimport Game from '../../components/Game';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport '../../App.css';\r\nimport categoriesJson from '../../categories.json';\r\n\r\nconst styles = theme => ({\r\n  card: {\r\n    padding: '10px',\r\n    margin: '10px'\r\n  }\r\n});\r\n\r\nfunction StartGame(props) {\r\n  const [categories, setCategories] = useState([]);\r\n  const [categoryChosen, setCategoryChosen] = useState(false);\r\n  const [loadedQuestion, setLoadedQuestion] = useState({});\r\n\r\n  useEffect(() => {\r\n    setCategories(categoriesJson);\r\n  }, []);\r\n\r\n  function fetchQuestions(category)  {\r\n    return fetch(`https://opentdb.com/api.php?amount=1&category=${category}&type=multiple`)\r\n            .then(res => res.json())\r\n              .then(data => {\r\n                setLoadedQuestion(data);\r\n                setCategoryChosen(true);\r\n              })\r\n  }\r\n\r\n  const { classes }  = props;\r\n  \r\n  return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n      {!categoryChosen ? \r\n      <>\r\n      <h1>Choose a Category</h1>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n      { categories.map((cat, i) => (\r\n        <Card className={classes.card} key={i} value={cat.value} onClick={() => {  fetchQuestions(cat.value) }}>\r\n            <CardContent>\r\n              <Typography>{cat.title}</Typography>\r\n            </CardContent>\r\n      </Card>)) }\r\n      </Grid> \r\n      </> : <Game question={loadedQuestion}/>}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(StartGame);\r\n","import React, { useState } from 'react';\r\nimport StartGame from '../StartGame';\r\n\r\nfunction WaitingRoom() {\r\n    const [startGame, setStartGame] = useState(false);\r\n\r\n    return (\r\n        <>\r\n        { !startGame ?\r\n            <>\r\n                <h1>Players</h1>\r\n                <span>Test 1</span>\r\n                <span>Test 2</span>\r\n                <span>Test 3</span>\r\n                <span>Test 4</span>\r\n                <button onClick={() => setStartGame(true)}>Start Game</button>\r\n            </>\r\n        : <StartGame />}\r\n        </>\r\n    )\r\n} \r\n\r\nexport default WaitingRoom;","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport uuidv1 from 'uuid/v1';\r\nimport uuidv4 from 'uuid/v4';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAsdY2YHQDAVJ9ZJgsqNVB2kaB3A5jVmNY\",\r\n  authDomain: \"fibbage-b1e4d.firebaseapp.com\",\r\n  databaseURL: \"https://fibbage-b1e4d.firebaseio.com\",\r\n  projectId: \"fibbage-b1e4d\",\r\n  storageBucket: \"fibbage-b1e4d.appspot.com\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport { uuidv1, uuidv4, firebase };\r\n","import React, { Component } from 'react';\r\nimport WaitingRoom from '../../components/WaitingRoom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { uuidv1, uuidv4, firebase } from '../../firebase.js';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        gameId: '',\r\n        user: '',\r\n        existingRoom: false,\r\n        started: false,\r\n        errorMsg: ''\r\n    }\r\n    \r\n    startGameHandler = () => {\r\n        this.setState({started: true})\r\n    }\r\n\r\n    inputHandler = (e) =>{\r\n        const name = e.target.value;\r\n        this.setState({ user: name });\r\n    }\r\n\r\n    gameIdInputHandler = (e) =>{\r\n        const gameId = e.target.value;\r\n        this.setState({ \r\n            gameId  : gameId\r\n        });\r\n    }\r\n\r\n    joinRoom = () => {\r\n        const gameId = this.state.gameId;\r\n        const user = this.state.user;\r\n        firebase.database().ref('games/' + gameId + '/' + user).set({\r\n            points : 0,\r\n            id     : uuidv1()\r\n        })\r\n        this.setState({\r\n            started: true\r\n        })\r\n    }\r\n\r\n    startGameHandler = () => {\r\n        if(this.state.user.length > 0){\r\n            const gameId = uuidv4();\r\n            const gameOwner = this.state.user\r\n            firebase.database().ref('games/' + gameId).set({\r\n                gameOwner : gameOwner\r\n            });\r\n            firebase.database().ref('games/' + gameId + '/' + gameOwner).set({\r\n                points    : 0,\r\n                id        : uuidv1()\r\n            });\r\n            this.setState({\r\n                gameId    : gameId,\r\n                started   : true\r\n            })\r\n        } else {\r\n            this.setState({ errorMsg: \"Must enter a username to create game\"})\r\n        }\r\n    }\r\n\r\n    joinGameHandler = (e) =>{\r\n        if(this.state.user.length > 0){\r\n            this.setState({ existingRoom: true });\r\n        } else {\r\n            this.setState({ errorMsg: \"Must enter a username to join game\"})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n                {this.state.started ? <WaitingRoom /> : !this.state.existingRoom ? \r\n                    <>\r\n                    <input type=\"text\" placeholder=\"Enter a username\" onInput={this.inputHandler}/>\r\n                    <span onClick={this.startGameHandler}>Create a Room</span>\r\n                    <span onClick={this.joinGameHandler}>Join a Room</span>\r\n                    <p>{this.state.errorMsg}</p>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <input type=\"text\" placeholder=\"Enter a game id\" onInput={this.gameIdInputHandler}/>\r\n                        <button onClick={this.joinRoom}>Join Room</button>\r\n                    </>\r\n                }\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Home from './containers/Home';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Home />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Question/index.js","components/Answers/index.js","components/Results/index.js","containers/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","react_default","a","createElement","question","withStyles","theme","card","margin","padding","Grid_default","container","direction","justify","alignItems","answers","map","ans","i","Card_default","className","classes","key","onClick","onSubmit","CardContent_default","Typography_default","Results","correct","Game","state","answered","submittedAnswer","chosenAnswer","componentWillMount","_this","setState","results","correct_answer","concat","Object","toConsumableArray","incorrect_answers","submitHandler","e","preventDefault","randomAnswers","autopickedAnswer","shuffleArray","changeHandler","target","value","clickedAnswerHandler","array","length","j","Math","floor","random","_ref","suggestLie","Fragment","this","response_code","components_Question","components_Results","components_Answers","type","onChange","placeholder","Component","App","isLoaded","categoryChosen","loadedQuestion","categories","title","fetchQuestions","_callee","category","regenerator_default","wrap","_context","prev","next","abrupt","fetch","then","res","json","data","stop","_this2","cat","containers_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f95c1824.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Question = (props) => (\r\n    <div>\r\n        <h2>{props.question}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Question;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = theme => ({\r\n    card: {\r\n        margin: '10px',\r\n        padding: '10px'\r\n    }\r\n})\r\n\r\nconst Answers = (props) => (\r\n    <Grid\r\n    container\r\n    direction=\"row\"\r\n    justify=\"center\"\r\n    alignItems=\"center\"\r\n  >\r\n        {props.answers.map((ans, i) => \r\n            (<Card className={props.classes.card} key={i} onClick={() => props.onSubmit(ans)}>\r\n                <CardContent>\r\n                    <Typography>\r\n                        {ans}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card> )\r\n        )}\r\n    </Grid>\r\n)\r\n\r\nexport default withStyles(styles)(Answers);","import React from 'react';\r\n\r\nconst Results = (props) => (\r\n    <div>\r\n        <h1>The correct answer was {props.correct}!</h1>\r\n    </div>\r\n);\r\n\r\nexport default Results;","import React, { Component } from 'react';\r\nimport Question from '../../components/Question';\r\nimport Answers from '../../components/Answers';\r\nimport Results from '../../components/Results';\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        question: {},\r\n        answered: false,\r\n        submittedAnswer: '',\r\n        answers: [],\r\n        chosenAnswer: ''\r\n    }\r\n    componentWillMount = () => {\r\n        this.setState({question: this.props.question, answers: [this.props.question.results[0].correct_answer, ...this.props.question.results[0].incorrect_answers]});\r\n    }\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const randomAnswers = [this.state.submittedAnswer || this.state.autopickedAnswer, ...this.state.answers];\r\n        this.shuffleArray(randomAnswers);\r\n        this.setState({answered: true, answers: randomAnswers});\r\n    }\r\n    changeHandler = (e) => {\r\n        this.setState({submittedAnswer: e.target.value})\r\n    }\r\n    clickedAnswerHandler = (e) => {\r\n        this.setState({chosenAnswer: e});\r\n    }\r\n    shuffleArray = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n    suggestLie = () => {\r\n        this.setState({\r\n            autopickedAnswer: this.state.answers[2]\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.question.response_code === 0 ?\r\n                    <>\r\n                    <Question question={this.state.question.results[0].question}/>\r\n                    {!this.state.answered ? \r\n                        <form onSubmit={this.submitHandler}>\r\n                            <input type=\"text\" onChange={this.changeHandler} placeholder={this.state.autopickedAnswer ? this.state.autopickedAnswer : ''}/>\r\n                            <input type=\"submit\" value=\"Submit\" />\r\n                            <span onClick={this.suggestLie}>Lie For Me</span>\r\n                        </form>\r\n                    : !this.state.chosenAnswer ? \r\n                        <Answers \r\n                        answers={this.state.answers}\r\n                        onSubmit={this.clickedAnswerHandler}\r\n                        /> : <Results correct={this.state.question.results[0].correct_answer} />\r\n                        }\r\n                    </>\r\n                : null }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport Game from './containers/Game';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport { withStyles } from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport './App.css';\n\nconst styles = theme => ({\n  card: {\n    padding: '10px',\n    margin: '10px'\n  }\n});\nclass App extends Component {\n  state = {\n    isLoaded: false,\n    categoryChosen: false,\n    loadedQuestion: {},\n    categories: [\n      {value:\"9\",\n      title:\"General Knowledge\"},\n      {value:\"10\",\n      title:\"Books\"},\n      {value:\"11\",\n      title:\"Film\"},\n      {value:\"12\",\n      title:\"Music\"},\n      {value:\"13\",\n      title:\"Musicals & Theatres\"},\n      {value:\"14\",\n      title:\"Television\"},\n      {value:\"15\",\n      title:\"Video Games\"},\n      {value:\"16\",\n      title:\"Board Games\"},\n      {value:\"17\",\n      title:\"Science & Nature\"},\n      {value:\"18\",\n      title:\"Computers\"},\n      {value:\"19\",\n      title:\"Mathematics\"},\n      {value:\"20\",\n      title:\"Mythology\"},\n      {value:\"21\",\n      title:\"Sports\"},\n      {value:\"22\",\n      title:\"Geography\"},\n      {value:\"23\",\n      title:\"History\"},\n      {value:\"24\",\n      title:\"Politics\"},\n      {value:\"25\",\n      title:\"Art\"},\n      {value:\"26\",\n      title:\"Celebrities\"},\n      {value:\"27\",\n      title:\"Animals\"},\n      {value:\"28\",\n      title:\"Vehicles\"},\n      {value:\"29\",\n      title:\"Comics\"},\n      {value:\"30\",\n      title:\"Gadgets\"},\n      {value:\"31\",\n      title:\"Japanese Anime & Manga\"},\n      {value:\"32\",\n      title:\"Cartoon & Animations\"}\n    ]\n  }\n  changeHandler = (e) => {\n    this.fetchQuestions(e);\n  }\n  fetchQuestions = async (category) => {\n    return fetch(`https://opentdb.com/api.php?amount=1&category=${category}&type=multiple`)\n            .then(res => res.json())\n              .then(data => this.setState({loadedQuestion: data, categoryChosen: true}))\n  }\n  render() {\n    const { classes }  = this.props;\n\n    const categories = this.state.categories.map((cat, i) => (\n      <Card className={classes.card} key={i} value={cat.value} onClick={() => { this.changeHandler(cat.value)}}>\n          <CardContent>\n            <Typography>{cat.title}</Typography>\n          </CardContent>\n      </Card>\n    ));\n\n    return (\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n        {!this.state.categoryChosen ? \n        <>\n        <h1>Choose a Category</h1>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n        {categories}\n        </Grid> \n        </> : <Game question={this.state.loadedQuestion}/>}\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}